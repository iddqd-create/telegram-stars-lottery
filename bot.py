import os
import logging
import requests
from threading import Thread
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '')
WEBAPP_URL = os.environ.get('WEBAPP_URL', '')

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = reply_markup
        
        response = requests.post(
            f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
            json=data
        )
        
        return response.json()
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        return None

def send_winner_notification(user_id, amount, room_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é"""
    text = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b> üéâ

üí∞ –ü—Ä–∏–∑: <b>{amount} ‚≠ê</b>
üé≤ –ö–æ–º–Ω–∞—Ç–∞: <code>{room_id[:8]}...</code>

–í–∞—à –≤—ã–∏–≥—Ä—ã—à –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?
"""
    
    keyboard = {
        'inline_keyboard': [[
            {'text': 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', 'web_app': {'url': WEBAPP_URL}}
        ]]
    }
    
    send_message(user_id, text, keyboard)

def send_loser_notification(user_id, winner_name, amount, room_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É"""
    text = f"""
üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name}</b>
üí∞ –ü—Ä–∏–∑: <b>{amount} ‚≠ê</b>
üé≤ –ö–æ–º–Ω–∞—Ç–∞: <code>{room_id[:8]}...</code>

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!
"""
    
    keyboard = {
        'inline_keyboard': [[
            {'text': 'üé∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'web_app': {'url': WEBAPP_URL}}
        ]]
    }
    
    send_message(user_id, text, keyboard)

def notify_room_participants(room_data):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
    try:
        winner = room_data['winner']
        winner_user_id = winner['user_id']
        winner_name = winner.get('first_name', winner.get('username', 'Winner'))
        winner_amount = winner['amount']
        room_id = room_data['room_id']
        
        for participant in room_data['participants']:
            user_id = participant['user_id']
            
            if user_id == winner_user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                send_winner_notification(user_id, winner_amount, room_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
                send_loser_notification(user_id, winner_name, winner_amount, room_id)
        
        logger.info(f"Notifications sent for room {room_id}")
    
    except Exception as e:
        logger.error(f"Error notifying participants: {e}")

def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    try:
        commands = [
            {'command': 'start', 'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é'},
            {'command': 'help', 'description': '–ü–æ–º–æ—â—å'},
            {'command': 'stats', 'description': '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}
        ]
        
        response = requests.post(
            f'https://api.telegram.org/bot{BOT_TOKEN}/setMyCommands',
            json={'commands': commands}
        )
        
        if response.json().get('ok'):
            logger.info("Bot commands set successfully")
        else:
            logger.error(f"Failed to set bot commands: {response.text}")
    
    except Exception as e:
        logger.error(f"Error setting bot commands: {e}")

def handle_start_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start"""
    text = """
üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Lottery!</b> üé∞

–≠—Ç–æ –∞–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞, –≥–¥–µ <b>6 –∏–≥—Ä–æ–∫–æ–≤</b> —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ, –∏ –æ–¥–∏–Ω —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ –∑–∞–±–∏—Ä–∞–µ—Ç <b>80% –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞</b>!

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (50, 100, 250 –∏–ª–∏ 500 ‚≠ê)
2Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
3Ô∏è‚É£ –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–∑, –µ—Å–ª–∏ –ø–æ–≤–µ–∑–µ—Ç!

<b>–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É:</b> 1 –∏–∑ 6 (16.67%)
<b>–í—ã–∏–≥—Ä—ã—à:</b> 80% –æ—Ç –æ–±—â–µ–≥–æ –ø—É–ª–∞
<b>–ö–æ–º–∏—Å—Å–∏—è:</b> 20% –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
    
    keyboard = {
        'inline_keyboard': [[
            {'text': 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å!', 'web_app': {'url': WEBAPP_URL}}
        ]]
    }
    
    send_message(chat_id, text, keyboard)

def handle_help_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help"""
    text = """
‚ùì <b>–ü–æ–º–æ—â—å - Stars Lottery</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>
‚Ä¢ –í –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç—è—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É
‚Ä¢ –û–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç 80% –ø—É–ª–∞
‚Ä¢ 20% –∏–¥–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

<b>–†–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫:</b>
‚Ä¢ 50 ‚≠ê - –≤—ã–∏–≥—Ä—ã—à –¥–æ 240 ‚≠ê
‚Ä¢ 100 ‚≠ê - –≤—ã–∏–≥—Ä—ã—à –¥–æ 480 ‚≠ê
‚Ä¢ 250 ‚≠ê - –≤—ã–∏–≥—Ä—ã—à –¥–æ 1,200 ‚≠ê
‚Ä¢ 500 ‚≠ê - –≤—ã–∏–≥—Ä—ã—à –¥–æ 2,400 ‚≠ê

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @klimaz
"""
    
    send_message(chat_id, text)

def handle_stats_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats"""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    text = """
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0
üèÜ –ü–æ–±–µ–¥: 0
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: 0%
üí∞ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: 0 ‚≠ê
üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: 0 ‚≠ê

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
"""
    
    keyboard = {
        'inline_keyboard': [[
            {'text': 'üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'web_app': {'url': WEBAPP_URL}}
        ]]
    }
    
    send_message(chat_id, text, keyboard)

def process_updates():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (polling mode –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    offset = 0
    
    while True:
        try:
            response = requests.get(
                f'https://api.telegram.org/bot{BOT_TOKEN}/getUpdates',
                params={'offset': offset, 'timeout': 30}
            )
            
            if response.status_code != 200:
                logger.error(f"Failed to get updates: {response.text}")
                time.sleep(5)
                continue
            
            data = response.json()
            
            if not data.get('ok'):
                logger.error(f"API error: {data}")
                time.sleep(5)
                continue
            
            updates = data.get('result', [])
            
            for update in updates:
                offset = update['update_id'] + 1
                
                if 'message' in update:
                    message = update['message']
                    chat_id = message['chat']['id']
                    text = message.get('text', '')
                    
                    if text.startswith('/start'):
                        handle_start_command(chat_id)
                    elif text.startswith('/help'):
                        handle_help_command(chat_id)
                    elif text.startswith('/stats'):
                        handle_stats_command(chat_id)
        
        except Exception as e:
            logger.error(f"Error processing updates: {e}")
            time.sleep(5)

def start_bot_polling():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    logger.info("Starting bot in polling mode...")
    set_bot_commands()
    
    thread = Thread(target=process_updates, daemon=True)
    thread.start()
    
    logger.info("Bot polling started")

if __name__ == '__main__':
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not set!")
    else:
        start_bot_polling()
        
        # Keep the script running
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("Bot stopped")
